--------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////
--------------------------------------------------------------------------
                  
                                 STACK

--------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////
--------------------------------------------------------------------------
Parent Question - 7
------------------------------------------------------------------------
Nearest greatest to left
Nearest greatest to right
Nearest smaller to left
Nearest smaller to right

Stock span problem
Maximum area of histogram

Max area of Rectangle in binary matrix

Rain water trapping
Implementing a min STACK
Implementing stack using heap
The celebrity problem
Longest valid Parenthesis
Iterative tower of height
-------------------------------------------------------------------------
Condition 1:
Array---------->Stack
      |-------->heap

Condition 2:
if double loop
for(i = 0 ; --------------> something)
  for(j = i ; --------------> something)

--------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////
--------------------------------------------------------------------------

Q.) Next largest to right  NLR
-> 1  3  2  4
   3  4  4 -1

 <<-------------pushing to stack
 1   3   2   4

  stack iteration
  top -> Null
  top -> 4
  top -> 2  4
  top -> 3  4, poped(2) since 2<3 which was the next node
  top -> 3  4

  conditions: 
    stack empty => -1
    s.top() > arr[i] => s.top()
    s.top() <= arr[i] => s.pop()

--------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////
--------------------------------------------------------------------------

Q.) Stock span problem
-> 100, 80, 60, 70, 60, 75, 85

Description:
check kro , the number of consecutive items which are smaller then == to current in left direction
index  --> 0,  1,  2,  3,  4,  5,  6
arr[i] -->100, 80, 60, 70, 60, 75, 85
Req O/P==>  1,  1,  1,  2,  1,  4,  6

Steps:
Nearest greater to left
index --> 0,  1,  2,  3,  4,  5,  6
arr[i]-->100, 80, 60, 70, 60, 75, 85
values==> -1,100, 80, 80, 70, 80, 100
iOFval==> -1,  0,  1,  1,  3,  1,  0

O/P ==>  iOFval - index
O/p ==>  1,  1,  1,  2,  1,  4,  6

--------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////
--------------------------------------------------------------------------

Q.) Maximum area of histogram  MAH
-> arr[]:
    6 2 5 4 5 1 6
    -------------
    0           0
    0   0   0   0
    0   0 0 0   0
    0   0 0 0   0
    0 0 0 0 0   0
    0 0 0 0 0 0 0
    -------------

    Storage and steps:
    right[] -> NSR(arr,size); // nearest smaller in right direction
    left[] -> NSL(arr,size);
    width[] -> right[i]-left[i]-1;
    area[] -> arr[i]*width[i];
    return max of area


--------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////
--------------------------------------------------------------------------

Q.) Max area of Rectanglein binary matrix
I/P -> arr[][];
     0 1 1 0
     1 1 1 1
     1 1 1 1 
     1 1 0 0 

     For every row we can make a histogram
     1x4; ->  0 1 1 0 -> O/P = 2
     2x4; ->  1 2 2 1 -> O/P = 4
     3x4; ->  2 3 3 2 -> O/P = 8
     4x4; ->  3 4 0 0 -> O/P = 6

     Ans = max(MAH(H1),  MAH(H2),  MAH(H3),  MAH(H4));
     Ans = max( 2, 4, 8, 6);


--------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////
--------------------------------------------------------------------------

Q.) Rain Water trapping
I/P -> arr[]
    3 0 0 2 0 4
    -------------> 1 for rain water, 0 for building
              0
    0 1 1 1 1 0
    0 1 1 0 1 0
    0 1 1 0 1 0
    ------------> 
sum(0,3,3,1,3,0) = 10 = ANSWER
    
    Storage and steps:
    index ->    0 1 2 3 4 5
    arr[] ->    3 0 0 2 0 4
    MFL[] ->    3 3 3 3 3 4  -> maxFromLeft
    MFR[] ->    4 4 4 4 4 4  -> maxFromRight
    
    MIN[] ->    3 3 3 3 3 4  -> min (maxFromLeft[i], maxFromLeft[i]);
    arr[] ->    3 0 0 2 0 4 
    wtr[] ->    0 3 3 1 3 0 -> MIN[i] - arr[i]

    return sum of wtr;

--------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////
--------------------------------------------------------------------------

Q.) Implementing min stack with extra space -------> O(n)
-> Make 2 stacks
stack<int> s;
stack<int> ss;

Q.) Implementing min stack with no extra space ------>O(1)
-> Make 1 variable
stack<int> s;
int minelement;

void popping ->
  if(s.size == 0) return -1;
  if(s.top >= minelement) pop directly
  elseif(s.top < minelement) then calc -> minelement = 2 x minelement - s.top() -> pop

void pushing(value x) ->
  if(s.size==0) -> s.push(x) -> min = x
  else
    if(x>= minelement) -> s.push(x)
    elseif(x< minelement)
      s.push(2x - minelement)
      minelement = x

int top()
  if(s.size == 0) return -1;
  if(s.top >= minelement) return s.top()
  elseif(s.top < minelement) minelement;


--------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////
--------------------------------------------------------------------------